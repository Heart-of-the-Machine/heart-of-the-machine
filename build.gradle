import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.matthewprenger.cursegradle'
    id 'com.modrinth.minotaur'
    // use allure because the JUnit report writer is broken
    id 'io.qameta.allure'
    id 'de.undercouch.download'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
}

repositories {
    maven { url = "https://maven.fabricmc.net/" }
    maven {
        // For LBA, LMP, and LNS
        name "BuildCraft"
        url "https://mod-buildcraft.com/maven"
    }
    maven {
        // For AE2
        name "Modmaven"
        url "https://modmaven.dev/"
        // For Gradle 5.1 and above, limit it to just AE2
        content {
            includeGroup 'appeng'
        }
    }
    maven {
        // For Mod Menu & Shapes
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        // For REI
        name "Shedaniel Maven"
        url "https://maven.shedaniel.me/"
    }
    maven {
        // For Canvas and dependencies
        name = "vram-group"
        url = "https://maven.vram.io/"
    }
    maven {
        // For Cotton-Config for Canvas
        name = "Cotton"
        url = "https://server.bbkr.space/artifactory/libs-release/"
    }
    maven {
        // For REI, odds and ends for Canvas
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        // For Sodium, Sodium Extras, and Indium
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    // Mod dependencies

    // LNS
    modImplementation("alexiil.mc.lib:libnetworkstack-base:${project.lns_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    include "alexiil.mc.lib:libnetworkstack-base:${project.lns_version}"

    // FREX
    modApi("io.vram:frex-fabric-${grondag_mc_tag}:${frex_version}") {
        transitive false
    }
    include "io.vram:frex-fabric-${grondag_mc_tag}:${frex_version}"

    // JMX
    modImplementation("io.vram:jmx-fabric-${grondag_mc_tag}:${jmx_version}") {
        transitive false
    }
    include "io.vram:jmx-fabric-${grondag_mc_tag}:${jmx_version}"

    // Shapes
    modImplementation("com.terraformersmc.terraform-api:terraform-shapes-api-v1:${shapes_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    include "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${shapes_version}"

    // Non-mod dependencies

    modImplementation "org.yaml:snakeyaml:${yaml_version}"
    include "org.yaml:snakeyaml:${yaml_version}"

    // Runtime Dependencies

    // Mod Menu
    modRuntimeOnly("com.terraformersmc:modmenu:${modmenu_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // REI
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntimeOnly("dev.architectury:architectury-fabric:${architectury_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Bitkit for some reason, cause FREX needs it
    modRuntimeOnly("io.vram:bitkit:${bitkit_version}")

    // for some annotations that appear in decompiled code

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    // testing frameworks

    testImplementation "io.kotest:kotest-runner-junit5:${project.kotest_version}"
    testImplementation "io.kotest:kotest-assertions-core:${project.kotest_version}"
    testImplementation "io.kotest.extensions:kotest-extensions-allure:${project.kotest_extensions_allure_version}"
    testImplementation "io.mockk:mockk:${project.mockk_version}"
    testImplementation "org.objenesis:objenesis:${project.objenesis_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    exclude("**/*.xcf")

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

afterEvaluate {
    runClient {
        jvmArgs("-Dmixin.debug=true")
        args("--width", "1280", "--height", "720")
    }
}

allure {
    autoconfigure = false
    version = project.allure_version
}

test {
    useJUnitPlatform()
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

if (System.getenv("CURSE_API_KEY") != null) {
    curseforge {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = '391897'
            changelogType = 'markdown'
            changelog = file("changelogs/changelog-${project.mod_version}.md")
            releaseType = project.mod_release_type
            project.publish_minecraft_versions.split(",").toList().forEach {
                addGameVersion it.trim()
            }
            addGameVersion 'Java 16'
            addGameVersion 'Fabric'
            mainArtifact(remapJar)
            relations {
                requiredDependency "fabric-api"
                requiredDependency "fabric-language-kotlin"
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

    afterEvaluate {
        tasks.curseforge391897.dependsOn remapJar
    }
}

if (System.getenv("MODRINTH_API_KEY") != null) {
    task publishModrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
        group('Upload')
        description('Publish this mod to Modrinth')

        token = System.getenv("MODRINTH_API_KEY")
        // found using https://api.modrinth.com/api/v1/mod/heart-of-the-machine
        projectId = '7vleuAJ9'
        versionNumber = project.mod_version
        uploadFile = remapJar
        releaseType = project.mod_release_type
        changelog = file("changelogs/changelog-${project.mod_version}.md").text
        project.publish_minecraft_versions.split(",").toList().forEach {
            addGameVersion it.trim()
        }
        addLoader 'fabric'
    }
}

compileKotlin.kotlinOptions.jvmTarget = "16"
compileTestKotlin.kotlinOptions.jvmTarget = "16"
