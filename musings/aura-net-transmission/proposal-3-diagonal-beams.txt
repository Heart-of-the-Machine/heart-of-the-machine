This proposal states that beams should only be kept track of by the node transmitting the beam. Furthermore, beams
cannot be interrupted by placing other objects in the path of the beam. This allows transmitter nodes to do things such
as having beams that are not aligned with any axis.

Questions:
 * Where are the connections between nodes stored?
   - Connections are stored inside each node. Parent nodes keep track of the locations of nodes to which they're
     transmitting to.
 * Aura "beams" should render in the world. How do we do that?
   - This is the tough part. The current, best solution is to just have beams render with the node that's transmitting
     them.
 * How do we track updates; make sure no node thinks its transmitting to a node that doesn't exist?
   - When a node is removed, it updates its children and its parents. This allows parents to stop transmitting to a node
     that doesn't exist. However, since energy is static, it might not even matter if a parent is sending energy to a
     node that no-longer exists.
 * How are "beams" synced to the client?
   - Beams and beam changes are synced to the client by their transmitting node.

Pros:
 * Less complicated: chunks are not forced to keep track of where beams are and if anything is intersecting them.
 * Beams can be diagonal.
 * Beams are synced with the node that's transmitting them.

Cons:
 * Keeping track of whether to render a beam is hard. What would likely end up happening is that when a transmitter node
   is not visible, its beam would disappear too. This is an annoyance, but it's not too major.

Details:
 * What happens when a transmitter node's transmitted aura value changes?
   - The transmitter node notifies its child nodes to tell them that its transmitted aura value has changed and that
     they should recalculate their aura values and update their children recursively.
 * What happens when a transmitter node is removed as an event (like from its block being broken)?
   - The transmitter node notifies its child nodes to tell them that it's no-longer supplying them aura and that they
     should recalculate their aura values and update their children recursively. This removal would also cause the child
     node to remove the parent node from its list of parents.
 * What happens when a transmitter node is removed during chunk scanning?
   - The transmitter node is added to a list of removed transmitter nodes during scanning, then, once the chunk's
     scanning is complete and all nodes are placed and removed from the storage, the transmitter attempts to notify its
     children to let them know it's been removed and that they should recalculate their aura values and update their
     children recursively. This removal would also cause the child node to remove the parent node from its list of
     parents.
 * What happens when a transmitter node is placed as an event?
   - Most new transmitters will not have any connections when placed. If a transmitter has a connection once placed,
     that is a special case. (Connections once placed would likely be for transmitters that transmit through portals.
 * What happens when a transmitter node is placed during chunk scanning?
   - Most new transmitters will not have any connections when placed.
 * What happens when a node is placed in the path of a beam?
   - Beams travel through everything, including other nodes, to reach their target. The placed node would be ignored.
 * What happens when a child node is removed as an event?
   - The child might notify the parent that it has been removed so that the parent can stop rendering/doing calculations
     for the beam to that child. This might not be necessary, though, as the beam renderer could simply check to see if
     the target node exists before rendering anything, and, because aura is static, there shouldn't be any calculations.
     This requires consideration...
      - This likely means that child nodes would also need to keep track of their parent nodes so as to notify them when
        the child is removed.
 * What happens when a child node is removed during chunk scanning?
   - This is a similar issue to the previous question. Removal notifications would happen once chunk scanning is
     complete, so as to reduce the likelihood of incorrect recalculations.
 * Can a child node be added during chunk scanning?
   - This would be unlikely except in the situation of portal transmitters, in which case, there needs to be a way to
     find the parent(s) and notify the child (and possibly the parents) to calculate the child's new aura value.
 * How are child nodes connected?
   - For normal transmitters, there would likely be a tool (item) for connecting a parent to a child.
 * What happens when a child node is connected?
   - This would notify the parent to connect to the child which would then update its aura value based on the parent.
     The child node would add the parent node to its list of parents and the parent node would add the child node to its
     list of children.
 * Are looping parent-child connections a problem?
   - Yes. Due to the nature of static energy networks, a loop could create infinite energy, though would likely result
     in a StackOverflowError as the nodes attempt to recursively update their children.
 * How are looping parent-child connections detected?
   - The recursive update methods would keep track of tall the positions of nodes that had been visited so far. If a
     node is visited that is already in the set of visited nodes then a loop is detected.
 * What happens when a looping parent-child connection is detected?
   - This would force a situation where the node and its accompanying block would need to be removed.
 * Are there any measures to prevent looping parent-child connections?
   - When the item is used to connect a parent to a child, there would likely be a check for loops. If a loop is
     detected, then the parent would refuse to connect to the child.

Implementation Concerns:
 * When a chunk scan happens, there could be a large number of nodes being deleted and added. In this situation, there
   could be a large number of duplicate recalculate notifications. Is this an issue?
   - Chunk scans adding and removing nodes should only happen if a node-chunk load has been corrupted which should be
     unlikely.
 * For large networks, causing an update could update a large number of nodes. Could this cause a StackOverflowError
   on its own? Could this cause lag? Are there ways to reduce this lag?
   _ Networks shouldn't be more than 1000 nodes deep, likely less than 100 nodes deep, so StackOverflowErrors shouldn't
     be too much of a concern. Though this is something to keep in the back of my mind.
   - As far as lag is concerned, reducing this update lag is one of the big purposes of storing aura nodes separately
     from the rest of the world data.
